//package com.stm.uid.util;
//
//public class IdWorkerUtils {
//
//    // ==============================Fields===========================================
//    /** Start time (2015-01-01) */
//    private final long twepoch = 1489111610226L;
//
//    /** Number of digits occupied by machine id */
//    private final long workerIdBits = 5L;
//
//    /** Number of digits occupied by data id */
//    private final long dataCenterIdBits = 5L;
//
//    /** The maximum machine id supported, the result is 31 (this shift algorithm can quickly calculate the maximum decimal number that several binary numbers can represent) */
//    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);
//
//    /** Maximum data id supported, result is 31 */
//    private final long maxDataCenterId = -1L ^ (-1L << dataCenterIdBits);
//
//    /** Number of digits of sequence in id */
//    private final long sequenceBits = 12L;
//
//    /** Machine ID moved 12 bits to the left */
//    private final long workerIdShift = sequenceBits;
//
//    /** Move data id 17 bits to the left (12 + 5) */
//    private final long dataCenterIdShift = sequenceBits + workerIdBits;
//
//    /** Time cut 22 bits left (5 + 5 + 12) */
//    private final long timestampLeftShift = sequenceBits + workerIdBits + dataCenterIdBits;
//
//    /** Mask for generating sequence, here is 4095 (0b111111111111=0xfff=4095) */
//    private final long sequenceMask = -1L ^ (-1L << sequenceBits);
//
//    /** Working machine ID (0-31) */
//    private long workerId;
//
//    /** Data center ID (0-31) */
//    private long dataCenterId;
//
//    /** Sequence in milliseconds (0-4095) */
//    private long sequence = 0L;
//
//    /** Last ID generated by */
//    private long lastTimestamp = -1L;
//
//    private static IdWorkerUtils idWorker;
//
//    static {
//        idWorker = new IdWorkerUtils(getWorkId(),getDataCenterId());
//    }
//
//    //==============================Constructors=====================================
//    /**
//     * Constructor
//     * @param workerId Work ID (0-31)
//     * @param dataCenterId Data center ID (0-31)
//     */
//    public IdWorkerUtils(long workerId, long dataCenterId) {
//        if (workerId > maxWorkerId || workerId < 0) {
//            throw new IllegalArgumentException(String.format("workerId can't be greater than %d or less than 0", maxWorkerId));
//        }
//        if (dataCenterId > maxDataCenterId || dataCenterId < 0) {
//            throw new IllegalArgumentException(String.format("dataCenterId can't be greater than %d or less than 0", maxDataCenterId));
//        }
//        this.workerId = workerId;
//        this.dataCenterId = dataCenterId;
//    }
//
//    // ==============================Methods==========================================
//    /**
//     * Get the next ID (this method is thread safe)
//     * @return SnowflakeId
//     */
//    public synchronized long nextId() {
//        long timestamp = timeGen();
//
//        //If the current time is less than the time stamp generated by the last ID, an exception should be thrown when the system clock goes back.
//        if (timestamp < lastTimestamp) {
//            throw new RuntimeException(
//                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
//        }
//
//        //If generated at the same time, sequence in milliseconds
//        if (lastTimestamp == timestamp) {
//            sequence = (sequence + 1) & sequenceMask;
//            //Sequence overflow in MS
//            if (sequence == 0) {
//                //Block to next MS, get new timestamp
//                timestamp = tilNextMillis(lastTimestamp);
//            }
//        }
//        //Timestamp change, sequence reset in MS
//        else {
//            sequence = 0L;
//        }
//
//        //Last ID generated by
//        lastTimestamp = timestamp;
//
//        //Shift and combine by or operation to form a 64 bit ID
//        return ((timestamp - twepoch) << timestampLeftShift)
//                | (dataCenterId << dataCenterIdShift)
//                | (workerId << workerIdShift)
//                | sequence;
//    }
//
//    /**
//     * Blocks to the next millisecond until a new timestamp is obtained
//     * @param lastTimestamp Last ID generated by
//     * @return Current timestamp
//     */
//    protected long tilNextMillis(long lastTimestamp) {
//        long timestamp = timeGen();
//        while (timestamp <= lastTimestamp) {
//            timestamp = timeGen();
//        }
//        return timestamp;
//    }
//
//    /**
//     * Returns the current time in milliseconds
//     * @return Current time (MS)
//     */
//    protected long timeGen() {
//        return System.currentTimeMillis();
//    }
//
//    private static Long getWorkId(){
//        try {
//            String hostAddress = Inet4Address.getLocalHost().getHostAddress();
//            int[] ints = StringUtils.toCodePoints(hostAddress);
//            int sums = 0;
//            for(int b : ints){
//                sums += b;
//            }
//            return (long)(sums % 32);
//        } catch (UnknownHostException e) {
//            // If acquisition fails, use random number standby
//            return RandomUtils.nextLong(0,31);
//        }
//    }
//
//    private static Long getDataCenterId(){
//        int[] ints = StringUtils.toCodePoints(SystemUtils.getHostName());
//        int sums = 0;
//        for (int i: ints) {
//            sums += i;
//        }
//        return (long)(sums % 32);
//    }
//
//
//    /**
//     * Static tool class
//     *
//     * @return
//     */
//    public static Long generateId(){
//        long id = idWorker.nextId();
//        return id;
//    }
//
//    //==============================Test=============================================
//    /** test */
//    public static void main(String[] args) {
//        System.out.println(System.currentTimeMillis());
//        long startTime = System.nanoTime();
//        for (int i = 0; i < 50000; i++) {
//            long id = IdWorkerUtils.generateId();
//            System.out.println(id);
//        }
//        System.out.println((System.nanoTime()-startTime)/1000000+"ms");
//    }
//}