package com.stm.uid.util;

import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.SystemUtils;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.net.Inet4Address;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.Enumeration;

/*
 * Utility class to generate Snowflake ID
 *
 * This is a 64 bit ID where whole set of 64 bits are generated
 * in a distributed system.
 *
 *  The structure of SnowFlake is as follows (each part is separated with -): < br >
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>
 *
 * the ids is divided as
 * First Bit Left for use later - 41 bits of time - 10 bits of data center and machine id - 12 bits of sequence number
 *
 * Total 2 to the power of 41 combinations - 1 around 69 years for a distributed system id generation
 *
 * Note : 41 bits can be changed to 45 bits or so depending on your different use case
 *
 * Note: Duplicate IDS will not be generated in the distributed system (differentiated by datacenterId and machineId)
 *
 * Note : We shamelessly referred to code present here. Please check that resource out.
 *        https://programming.vip/docs/java-makes-wheels-generate-distributed-global-unique-id.html
 */
@Component
public class SnowflakeIDGenerator {

    /** Start time 10th March 2022 */
    private final long epoch = 1646941122573L;

    /** Number of digits occupied by machine id */
    private final long machineIdBitsCnt = 5L;

    /** Number of digits occupied by data id */
    private final long dataCenterIdBitsCnt = 5L;

    /** The maximum machine id supported, the result is 31
     * (this shift algorithm can quickly calculate the maximum decimal
     * number that several binary numbers can represent) */
    private final long maxMachineIdSupported = -1L ^ (-1L << machineIdBitsCnt);

    /** Maximum data id supported, result is 31 */
    private final long maxDataCenterId = -1L ^ (-1L << dataCenterIdBitsCnt);

    /** Number of digits of sequence in id */
    private final long sequenceBits = 12L;

    /** Machine ID moved 12 bits to the left */
    private final long machineIdShiftCnt = sequenceBits;

    /** Move data id 17 bits to the left (12 + 5) */
    private final long dataCenterIdShiftCnt = sequenceBits + machineIdShiftCnt;

    /** Time cut 22 bits left (5 + 5 + 12) */
    private final long timestampLeftShift = sequenceBits + machineIdShiftCnt + dataCenterIdShiftCnt;

    /** Mask for generating sequence, here is 4095 (0b111111111111=0xfff=4095) */
    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    /** Working machine ID (0-31) */
    private long machineId;

    /** Data center ID (0-31) */
    private long dataCenterId;

    /** Sequence in milliseconds (0-4095) */
    private long sequence = 0L;

    /** Last ID generated by this generator */
    private long lastTimestamp = -1L;

    public SnowflakeIDGenerator() {

    }

    @PostConstruct
    public void init() {
        machineId = getMachineID();
        dataCenterId = getDataCenterID();
    }

    public synchronized Long fetchNextId() {
        long timestamp = System.currentTimeMillis();

        //If the current time is less than the time stamp generated by the last ID, an exception should be thrown when the system clock goes back.
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(
                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If generated at the same time, sequence in milliseconds
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            //Sequence overflow in MS
            if (sequence == 0) {
                //Block to next MS, get new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //Timestamp change, sequence reset in MS
        else {
            sequence = 0L;
        }

        //Last ID generated by
        lastTimestamp = timestamp;

        //Shift and combine by or operation to form a 64 bit ID
        return ((timestamp - epoch) << timestampLeftShift)
                | (dataCenterId << dataCenterIdShiftCnt)
                | (machineId << machineIdShiftCnt)
                | sequence;
    }

    // obtaining from Mac address of the machine as it is unique
    private Long getMachineID() {
        long machineId;
        try {
            StringBuilder sb = new StringBuilder();
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            while (networkInterfaces.hasMoreElements()) {
                NetworkInterface networkInterface = networkInterfaces.nextElement();
                byte[] mac = networkInterface.getHardwareAddress();
                if (mac != null) {
                    for(byte macPort: mac) {
                        sb.append(String.format("%02X", macPort));
                    }
                }
            }
            machineId = sb.toString().hashCode();
        } catch (Exception ex) {
            machineId = RandomUtils.nextLong(0,31);;
        }
        machineId = machineId & maxMachineIdSupported;
        return machineId;
    }

    private static Long getDataCenterID(){
        int[] ints = StringUtils.toCodePoints(SystemUtils.getHostName());
        int sums = 0;
        for (int i: ints) {
            sums += i;
        }
        return (long)(sums % 32);
    }

    /**
     * Blocks to the next millisecond until a new timestamp is obtained
     * @param lastTimestamp Last ID generated by
     * @return Current timestamp
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = System.currentTimeMillis();
        while (timestamp <= lastTimestamp) {
            timestamp = System.currentTimeMillis();
        }
        return timestamp;
    }

}

